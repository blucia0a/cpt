#5  0x000000000040206a in consumer (q=0x226c140) at pbzip2.cpp:1028
1028				pret = pthread_cond_timedwait(fifo->notEmpty, fifo->mut, &waitTimer);
(gdb) infoQuit
(gdb) p /x LWT_table[fifo->mut]
Argument to arithmetic operation not a number or boolean.
(gdb) p /x LWT_table[(unsigned long)fifo->mut]
$1 = 0x405549
(gdb) info line *405549
No line number information available for address 0x6302d
(gdb) info line *0x405549
Line 1133 of "pbzip2.cpp" starts at address 0x405531 <_Z11queueDeleteP5queue+81> and ends at 0x405571 <_Z11queueDeleteP5queue+145>.




(gdb) info line *0x4dfefc
Line 102 of "fdqueue.c" starts at address 0x4dfef3 <ap_queue_info_set_idle+147> and ends at 0x4dff01 <ap_queue_info_set_idle+161>.
(gdb) where
#0  0x00007fe424eac015 in raise () from /lib/libc.so.6
#1  0x00007fe424eadb83 in abort () from /lib/libc.so.6
#2  0x0000000000463b49 in ap_log_assert (szExp=0x506818 "!((queue)->nelts == (queue)->bounds)", szFile=0x5067f8 "fdqueue.c", nLine=307)
    at log.c:868
#3  0x00000000004e06e2 in ap_queue_push (queue=0x2380008, sd=0x23ff2e8, p=0x23ff268) at fdqueue.c:307
#4  0x0000000002380010 in ?? ()
#5  0x00000000023ff268 in ?? ()
#6  0x0000000000000000 in ?? ()
(gdb) p /x LWT_table[(unsigned long)(&worker_queue_info->idlers)]
$20 = 0x20000004dfefc
(gdb) where
#0  0x00007fe424eac015 in raise () from /lib/libc.so.6
#1  0x00007fe424eadb83 in abort () from /lib/libc.so.6
#2  0x0000000000463b49 in ap_log_assert (szExp=0x506818 "!((queue)->nelts == (queue)->bounds)", szFile=0x5067f8 "fdqueue.c", nLine=307)
    at log.c:868
#3  0x00000000004e06e2 in ap_queue_push (queue=0x2380008, sd=0x23ff2e8, p=0x23ff268) at fdqueue.c:307
#4  0x0000000002380010 in ?? ()
#5  0x00000000023ff268 in ?? ()
#6  0x0000000000000000 in ?? ()
(gdb) inspect *worker_queue_info
$21 = {idlers = 4294967294, idlers_mutex = 0x2380150, wait_for_idler = 0x23801a0, terminated = 0, max_idlers = 3, 
  recycled_pools = 0x23d1178}
(gdb) idlers is overflowed!Quit
(gdb) p /x LWT_table[(unsigned long)(&worker_queue_info->idlers)]
$22 = 0x20000004dfefc
(gdb) info line *0x4dfefc
Line 102 of "fdqueue.c" starts at address 0x4dfef3 <ap_queue_info_set_idle+147> and ends at 0x4dff01 <ap_queue_info_set_idle+161>.
(gdb) p /x myTid
$23 = 0x5
(gdb) thread 2
Thread ID 2 not known.
(gdb) thread 1
[Switching to thread 1 (Thread 0x7fe4262fe730 (LWP 16174))]#0  0x00007fe4251f9e7b in sigwait () from /lib/libpthread.so.0
(gdb) p /x myTid
$24 = 0x0
(gdb) thread 3
[Switching to thread 3 (Thread 0x416f0950 (LWP 16179))]#0  0x00007fe424f216e1 in nanosleep () from /lib/libc.so.6
(gdb) p /x myTid
$25 = 0x2
(gdb) where
#0  0x00007fe424f216e1 in nanosleep () from /lib/libc.so.6
#1  0x00007fe424f58c74 in usleep () from /lib/libc.so.6
#2  0x00000000004dff7e in ap_queue_info_set_idle (queue_info=0x2380128, pool_to_recycle=Unhandled dwarf expression opcode 0xf3
) at fdqueue.c:119
#3  0x00000000004db883 in worker_thread (thd=0x2380230, dummy=Unhandled dwarf expression opcode 0xf3
) at worker.c:844
#4  0x00007fe425a909e7 in dummy_worker (opaque=0x2380230) at threadproc/unix/thread.c:142
#5  0x00007fe42584aeb2 in threadStartFunc (arg=0x23ba2f0) at RWCalls.cpp:69
#6  0x00007fe4251f23ea in start_thread () from /lib/libpthread.so.0
#7  0x00007fe424f5fcbd in clone () from /lib/libc.so.6
#8  0x0000000000000000 in ?? ()
(gdb) up
#1  0x00007fe424f58c74 in usleep () from /lib/libc.so.6
(gdb) up
#2  0x00000000004dff7e in ap_queue_info_set_idle (queue_info=0x2380128, pool_to_recycle=Unhandled dwarf expression opcode 0xf3
) at fdqueue.c:119
119	    usleep(1000);
(gdb) up
#3  0x00000000004db883 in worker_thread (thd=0x2380230, dummy=Unhandled dwarf expression opcode 0xf3
) at worker.c:844
844	            rv = ap_queue_info_set_idle(worker_queue_info, last_ptrans);
(gdb) down
#2  0x00000000004dff7e in ap_queue_info_set_idle (queue_info=0x2380128, pool_to_recycle=Unhandled dwarf expression opcode 0xf3
) at fdqueue.c:119
119	    usleep(1000);
(gdb) 




-----------------------------------------
#3  0x00000000005eb977 in mysql_insert(...) at sql_insert.cc:317
317	      }else{ assert(mysql_bin_log.log_type != LOG_CLOSED && "INSERT NOT LOGGED."); }
(gdb) inspect mysql_bin_log.log_type
$2 = LOG_CLOSED
(gdb) p /x LWT_table[(unsigned long)(&mysql_bin_log.log_type)]
$3 = 0xb000000600265
(gdb) info line *0x600265
Line 1487 of "log.cc" starts at address 0x600246 <_ZN9MYSQL_LOG5closeEb+262>
   and ends at 0x60026a <_ZN9MYSQL_LOG5closeEb+298>.
(gdb) p /x myTid
$4 = 0xc



#3  0x00000000005eb977 in mysql_insert(...) at sql_insert.cc:317
317	      }else{ assert(mysql_bin_log.log_type != LOG_CLOSED && "INSERT NOT LOGGED."); }
(gdb) inspect mysql_bin_log.log_type
$2 = LOG_CLOSED
(gdb) p /x LWT_table[(unsigned long)(&(mysql_bin_log.log_type))]
$3 = 0x96039c3600265
(gdb) info line *0x6039c3
Line 864 of "log.cc" starts at address 0x6039c3 <_ZN9MYSQL_LOG8new_fileEb+227> and ends at 0x6039db <_ZN9MYSQL_LOG8new_fileEb+251>.
(gdb) info line *0x600265
Line 1487 of "log.cc" starts at address 0x600246 <_ZN9MYSQL_LOG5closeEb+262> and ends at 0x60026a <_ZN9MYSQL_LOG5closeEb+298>.


--------------------------------------------------------------------------

Process:

With a failing run:
1)run, fail, collect core including LWT

2)load core in gdb.  See failure at 
  "3141	  hts_mutexlock(&opt->state.lock);"

3)inspect LWT_table[ &opt->state.lock ];  it reports:
  Thread:    Code Point:

With a non-failing run:
1)run in gdb past point of failure, then take breakpoint

2)at breakpoint, inspect the value of LWT_table[ &opt->state.lock ];  reports:
Thread: 1  
Code Point: 
Line 170 of "htsthread.c" starts at address 0x7f82702fa16b <hts_mutexinit+58>
   and ends at 0x7f82702fa16e <hts_mutexinit+61>.

Reason that this init function should have run in the failing run, too.

Benefit of LWT: Says which thread should have initialized the var and where in
the source the initialization occurs.  We know "both ends" of the null deref --
who should have made it not null and who does the deref.



LWT entry for successful run points here:

HTSEXT_API void hts_mutexinit(htsmutex* mutex) {
  htsmutex_s* smutex = malloct(sizeof(htsmutex_s));
#ifdef _WIN32
  smutex->handle = CreateMutex(NULL, FALSE, NULL);
#else
  pthread_mutex_init(&smutex->handle, 0);
#endif
  *mutex = smutex; <----------------------------------
}




---------------------------

JDK StringBuffer

Assertion failure @: 
 0x0000000000400df2 in StringBuffer::getChars (this=this@entry=0x603040, 
    srcBegin=srcBegin@entry=0, srcEnd=srcEnd@entry=3, dst=0x608220 "", 
    dstBegin=0) at stringbuffer.cpp:54
54	    assert(0 && "(srcEnd < 0) || (srcEnd > count)");

(gdb) inspect srcEnd
$9 = 3
(gdb) inspect srcBegin
$10 = 0
(gdb) inspect count
$11 = 0

Conclusion: something has written over srcEnd, srcBegin, or count.

srcEnd, srcBegin, in registers.  Couldn't have been written over.
count: in memory.

(gdb) print /x LWT_table[ ((unsigned long)&count) & 0xffffff ]
$5 = 0x1000000400f01
(gdb) x 400f01
Invalid number "400f01".
(gdb) x 0x400f01
0x400f01 <StringBuffer::erase(int, int)+179>:	0x0c638944
stringbuffer.cpp:107    count -= len;


  int len = sb->length();//Thread 1: acquire lock, get len, release lock
  //Thread 2 erases characters from sb.  updates count to count - num_erased
  int newcount = count + len;
  if (newcount > value_length)
    expandCapacity(newcount);
  sb->getChars(0, len, value, count);//Thread 1: get len characters from sb -
                                     //if sb has fewer than len characters, 
                                     //assert fails.  At this point, 
                                     //count -= len @ erase, ln 107 is the 
                                     //last writer of sb->count
  //Thread 2's erase left sb with fewer than len chars, so assert fails!




APACHE 2.0.48 cache bug
-----------------------



#4  0x0000000000425a59 in cleanup_cache_object (obj=obj@entry=0x7fffd005f620)
    at mod_mem_cache.c:284
284	        free(obj->info.filename);
(gdb) inspect obj
$1 = (cache_object_t *) 0x7fffd005f620
(gdb) inspect obj->info
$2 = {content_type = 0x7fffd005f500 "0©\005Ðÿ\177", etag = 0x0, 
  lastmods = 0x0, filename = 0x7fffd00595d0 "", date = 1383865953000000, 
  lastmod = 0, lastmod_str = '\000' <repeats 29 times>, 
  expire = 1122354000000000, request_time = 1383865953138277, 
  response_time = 1383865953140116, len = 63, ims = 0, ius = 0, im = 0x0, 
  inm = 0x0}

(gdb) print /x LWT_table[ ((unsigned long)0x7fffd005f620) & 0xffffff ]
$3 = 0x4000000425a66

(gdb) print /x myTid 
$4 = 0x3000000000000

IOW:  I am thread 3.  I am freeing something that is being double freed.  The last one to write this thing is thread 4 @ 0x425a66 -- mod_mem_cache.c line 287

mod_mem_cache.c:287
-------------------
    static void cleanup_cache_object(cache_object_t *obj)
    {
       mem_cache_object_t *mobj = obj->vobj;

       //...

287:   free(obj);



Transmission --
-----------------------------
Failing run:
#1  0x00007ffff6bdcb8b in abort () from /lib/x86_64-linux-gnu/libc.so.6
#4  0x000000000041f69c in allocateBandwidth (b=b@entry=0x0, 
    dir=dir@entry=TR_CLIENT_TO_PEER, period_msec=period_msec@entry=500, 
    peer_pool=peer_pool@entry=0x7fffe4000930) at bandwidth.c:251
#5  0x000000000041fe98 in tr_bandwidthAllocate (b=0x0, 
    dir=dir@entry=TR_CLIENT_TO_PEER, period_msec=period_msec@entry=500)
    at bandwidth.c:307
#6  0x00000000004297e2 in bandwidthPulse (vmgr=0x671dc0) at peer-mgr.c:2336
...
(gdb) inspect b
$2 = (tr_bandwidth *) 0x0
(gdb) 


Non-failing run:
(gdb) break bandwidth.c:251
(gdb) print /x LWT_table[&(b->magicNumber)]
$17 = 0x100000041fb00
(gdb) print /x myTid
$18 = 0x2000000000000
(gdb) info line *0x41fb00
Line 135 of "bandwidth.c" starts at address 0x41fb00 <tr_bandwidthNew+137>
   and ends at 0x41fb18 <tr_bandwidthNew+161>.
(gdb) 




Apache-45605
------------

(gdb) print /x myTid
$6 = 0x5000000000000
(gdb) print /x LWT_table[ &worker_queue_info->idlers ]
$7 = 0x6000000472814
(gdb) print /x worker_queue_info->idlers
$8 = 0xfffffffe
(gdb) print /x worker_queue_info->max_idlers
$9 = 0x3
(gdb) print /x LWT_table[ &worker_queue_info->idlers ]
$10 = 0x6000000472814
(gdb) info line *0x472814
Line 191 of "fdqueue.c"
   starts at address 0x4727f6 <ap_queue_info_wait_for_idler+129>
   and ends at 0x472822 <ap_queue_info_wait_for_idler+173>.
(gdb) print /x myTid
$11 = 0x5000000000000
(gdb) where
#0  0x00007ffff756b9fa in __lll_unlock_wake ()
   from /lib/x86_64-linux-gnu/libpthread.so.0
#1  0x00007ffff7568104 in _L_unlock_644 ()
   from /lib/x86_64-linux-gnu/libpthread.so.0
#2  0x00007ffff7568063 in pthread_mutex_unlock ()
   from /lib/x86_64-linux-gnu/libpthread.so.0
#3  0x00007ffff799b824 in apr_thread_mutex_unlock (mutex=<optimized out>)
    at locks/unix/thread_mutex.c:121
#4  0x0000000000472762 in ap_queue_info_set_idle (queue_info=0x731588, 
    pool_to_recycle=pool_to_recycle@entry=0x7fffd8004b98) at fdqueue.c:133
#5  0x000000000047088d in worker_thread (thd=0x7316f0, dummy=<optimized out>)
    at worker.c:844
#6  0x00007ffff79a9ca6 in dummy_worker (opaque=<optimized out>)
    at threadproc/unix/thread.c:142
#7  0x00007ffff7564e9a in start_thread ()
   from /lib/x86_64-linux-gnu/libpthread.so.0
#8  0x00007ffff72913fd in clone () from /lib/x86_64-linux-gnu/libc.so.6
#9  0x0000000000000000 in ?? ()
(gdb) 

The above shows that when the failure occurs, the value of idlers visible in
the worker threads is 0xfffffffe -- an underflow.  That's bad, but it doesn't
say where that value came from.  The last writer slice for the queue->idlers
shows that the listener decremented it, writing it last, and that it did so
in ap_queue_info_wait_for_idler at line 191 of fdqueue.c, "apr_atomic_dec32(&(queue_info->idlers));"

