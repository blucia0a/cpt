>>>Overheads Low Enough for Production [Reviewers A & D]
We appreciate the reviewers' suggestions that our overheads may be unacceptable
in some production settings.   We do, however, consider our overheads
appropriate for production in many cases: 3 of 4 servers and 4 of 9 PARSEC
benchmarks have under 10% overhead -- arguably low enough for production.
Achieving LWS overheads low enough for production was a focal design goal
because, as Section 3.1 explains, some failures only happen in production.  We
did not intend to convey that LWS is always appropriate for production --
certainly not with the 3-4x overhead of vips and swaptions.  We will tone down
the language surrounding our overheads for the final version.


>>>Other Approaches and Information [Reviewers A, B, & C]
We were pleased to see the number of great suggestions to extend LWS!

Reviewer A- We are very interested in the applicability of LWS to sequential
bugs.

Reviewers B & C- You correctly observe that LWS provides a limited form of
history, even with the bounded context-sensitivity we mention in Section 6.4.
Finding root causes, tracking the computation that produced a value, and
tracking write histories all seem like very cool future directions for LWS!  

Our goals in this work, articulated on page 1, are collecting provenance,
focusing on concurrency, and being very lightweight. Omitting richer debugging
information was a conscious design choice in LWS that yields a useful form of
provenance, targets concurrency by tracking shared accesses, and is very
lightweight compared to more sophisticated approaches.  Section 6.1.1 shows
that even this simple form of provenance helps debug and Figure 9 supports the
case that LWS is lightweight with data.

Reviewer C- Race detection is, indeed, often helpful for diagnosing problematic
thread interactions.  However, race detection is not always useful because not
all concurrency bugs are races (e.g, two critical sections that should have
been a single one).  LWS tracks provenance for racey and non-racey accesses.

>>>Comparison to Octet [Reviewer D]
We appreciate the connection of LWS to Octet, but, as we emphasize in Section 7
"Communication and Sharing Analyses", our setting (C/C++), approach
(lightweight, unsound with data-races), and purpose (provenance debugging) are
considerably different.  Furthermore, Octet's performance figures are for its
Java implementation in the Jikes RVM with existing safe points.  The data from
our safe point study (in Section 7) suggest that adding the safe points Octet
needs to C/C++ would increase its overheads.  We appreciate the pointer to the
(unpublished?) C++11 implementation of Octet's barriers -- we are interested in
comparing them to LWS.


>>>Value of CTraps [Reviewer C]
The focus of this work is certainly LWS and its provenance debugging value.  We
do not, however, agree that CTraps is superfluous.  As Section 4.2 describes,
LWS is the foundation of other useful analyses.  CTraps illustrates this fact,
implementing two analyses from prior work (Section 4.2) with practical
overheads (Figure 10).


>>>Library Code [Reviewer A]
As with any compiler-based instrumentation strategy for C/C++, LWS
does not instrument code in pre-compiled libraries.  Writes in such libraries
are not tracked and may lead to imprecision.  We will add this point to the
text in our final version.


>>>Implementation Questions
Reviewer A- 
Assembly: We did not instrument inline assembly and writes in such code did
not update the LWT. 

32-bit vs. 64 bit: we targeted 64-bit programs. The low 48 bits of program
counter values encoded program points. At thread spawn, the runtime doles out
unique 16-bit thread IDs that threads store thread-locally.  We pack these
together to form an LWT entry.

Reviewer C- The shadow array is 2GB to strike a balance between hash collisions
(which occur with a smaller array) and the need to keep memory overheads
reasonable.


>>>Server Performance and I/O [Reviewers A & C]
The servers were not always compute bound, but we ran them with
realistic inputs. We used machine-local resources (databases, web content, etc)
to control the latency hiding effect of I/O by avoiding the network. 


>>>Lossy Hash Table [Reviewers B & C]
Our "lossy resolution policy" for hash collisions means a colliding bin write
overwrites the existing bin contents.  Section 6.5 explains that such
collisions are rare and we did not see the effect of any collisions in our
experiments.


>>>Races in the LWT
We cut a full discussion of races in the LWT due to the page limit.  Section
3.3 touches on this issue, emphasizing the most important point, which is that
regions of code that are data-race free suffer no LWT corruption. 
